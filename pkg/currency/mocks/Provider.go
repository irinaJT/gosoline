// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	currency "github.com/justtrackio/gosoline/pkg/currency"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// FetchHistoricalRates provides a mock function with given fields: ctx, dates
func (_m *Provider) FetchHistoricalRates(ctx context.Context, dates []time.Time) (map[time.Time][]currency.Rate, error) {
	ret := _m.Called(ctx, dates)

	if len(ret) == 0 {
		panic("no return value specified for FetchHistoricalRates")
	}

	var r0 map[time.Time][]currency.Rate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []time.Time) (map[time.Time][]currency.Rate, error)); ok {
		return rf(ctx, dates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []time.Time) map[time.Time][]currency.Rate); ok {
		r0 = rf(ctx, dates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[time.Time][]currency.Rate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []time.Time) error); ok {
		r1 = rf(ctx, dates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_FetchHistoricalRates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchHistoricalRates'
type Provider_FetchHistoricalRates_Call struct {
	*mock.Call
}

// FetchHistoricalRates is a helper method to define mock.On call
//   - ctx context.Context
//   - dates []time.Time
func (_e *Provider_Expecter) FetchHistoricalRates(ctx interface{}, dates interface{}) *Provider_FetchHistoricalRates_Call {
	return &Provider_FetchHistoricalRates_Call{Call: _e.mock.On("FetchHistoricalRates", ctx, dates)}
}

func (_c *Provider_FetchHistoricalRates_Call) Run(run func(ctx context.Context, dates []time.Time)) *Provider_FetchHistoricalRates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]time.Time))
	})
	return _c
}

func (_c *Provider_FetchHistoricalRates_Call) Return(_a0 map[time.Time][]currency.Rate, _a1 error) *Provider_FetchHistoricalRates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_FetchHistoricalRates_Call) RunAndReturn(run func(context.Context, []time.Time) (map[time.Time][]currency.Rate, error)) *Provider_FetchHistoricalRates_Call {
	_c.Call.Return(run)
	return _c
}

// FetchLatestRates provides a mock function with given fields: ctx
func (_m *Provider) FetchLatestRates(ctx context.Context) ([]currency.Rate, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchLatestRates")
	}

	var r0 []currency.Rate
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]currency.Rate, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []currency.Rate); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]currency.Rate)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_FetchLatestRates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchLatestRates'
type Provider_FetchLatestRates_Call struct {
	*mock.Call
}

// FetchLatestRates is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Provider_Expecter) FetchLatestRates(ctx interface{}) *Provider_FetchLatestRates_Call {
	return &Provider_FetchLatestRates_Call{Call: _e.mock.On("FetchLatestRates", ctx)}
}

func (_c *Provider_FetchLatestRates_Call) Run(run func(ctx context.Context)) *Provider_FetchLatestRates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Provider_FetchLatestRates_Call) Return(_a0 []currency.Rate, _a1 error) *Provider_FetchLatestRates_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Provider_FetchLatestRates_Call) RunAndReturn(run func(context.Context) ([]currency.Rate, error)) *Provider_FetchLatestRates_Call {
	_c.Call.Return(run)
	return _c
}

// GetPriority provides a mock function with no fields
func (_m *Provider) GetPriority() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPriority")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Provider_GetPriority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPriority'
type Provider_GetPriority_Call struct {
	*mock.Call
}

// GetPriority is a helper method to define mock.On call
func (_e *Provider_Expecter) GetPriority() *Provider_GetPriority_Call {
	return &Provider_GetPriority_Call{Call: _e.mock.On("GetPriority")}
}

func (_c *Provider_GetPriority_Call) Run(run func()) *Provider_GetPriority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_GetPriority_Call) Return(_a0 int) *Provider_GetPriority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_GetPriority_Call) RunAndReturn(run func() int) *Provider_GetPriority_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *Provider) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Provider_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type Provider_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *Provider_Expecter) Name() *Provider_Name_Call {
	return &Provider_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *Provider_Name_Call) Run(run func()) *Provider_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Provider_Name_Call) Return(_a0 string) *Provider_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Provider_Name_Call) RunAndReturn(run func() string) *Provider_Name_Call {
	_c.Call.Return(run)
	return _c
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
